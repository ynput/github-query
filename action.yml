---

# TODO need strategy where to store defaults - which an be override by repo var

name: Github Release Information
description: Fetch and convert data from github to use for a release trigger

branding:
  icon: arrow-left-circle
  color: green

inputs:
  repo:
    description: Repository to query data from in the format of <owner>/<repo-name>
    required: true
  base_branch:
    description: Only filter for PRs merged into this branch
    required: true
    default: "develop"
  date:
    description: Starting date to start query from
    required: true
  query_parameters:
    description: Parameters to query for in pr Information
    required: true
  changelog_labels:
    description: CSV string of labels for changelog order
    required: false

outputs:
  raw-output:
    description: Full output json dictionary from github api.
    value: ${{ steps.raw-output.outputs.raw_output }}
  label-list:
    description: List of unique labels found in PRs.
    value: ${{ steps.get-labels-list.outputs.label_list }}
  bump-increment:
    description: Increment for version bumping - either `patch` or 'minor'
    value: ${{ steps.bump-increment.outputs.increment }}
  changelog-markdown:
    description: String containing full markdown syntax for release changelog information
    value: ${{ steps.write-changelog.outputs.changelog }}

runs:
  using: composite

  steps:
    - name: Get raw GitHub output
      id: raw-output
      shell: bash
      run: |
        raw_output=$(gh pr list --state merged --search 'merged:>=${{ inputs.date }}' --json ${{ inputs.query_parameters }} --repo ${{ inputs.repo }})
        if [[ "$raw_output" == '[]' ]]; then
          echo "raw_output=''" >> $GITHUB_OUTPUT
          exit 0
        fi

        echo "raw_output=$raw_output" >> $GITHUB_OUTPUT

    - name: Get label list
      id: get-labels-list
      shell: bash
      run: |
        cd $GITHUB_ACTION_PATH
        label_list=$(python github_query.py pr-labels "${{ inputs.repo }}" "${{ inputs.base_branch }}" "${{ inputs.query_parameters }}" "${{ inputs.date }}")
       
        echo "label_list=$label_list" >> $GITHUB_OUTPUT

    - name: Get version increment
      id: bump-increment
      shell: bash
      run: |
        cd $GITHUB_ACTION_PATH
        increment=$(python github_query.py version-increment "${{ inputs.repo }}" "${{ inputs.base_branch }}" "${{ inputs.query_parameters }}" "${{ inputs.date }}")

        echo "increment=$increment" >> $GITHUB_OUTPUT

    # INFO multiline strings need to be precessed like this according to 
    # INFO https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions#multiline-strings
    # INFO and
    # INFO https://stackoverflow.com/questions/74137120/how-to-fix-or-avoid-error-unable-to-process-file-command-output-successfully/74232400#74232400
    - name: Prepare Changelog
      if: ${{ inputs.changelog_labels }}
      id: write-changelog
      shell: bash
      run: |
        cd $GITHUB_ACTION_PATH
        changelog=$(python github_query.py generate-release-changelog "${{ inputs.repo }}" "${{ inputs.base_branch }}" "${{ inputs.query_parameters }}" "${{ inputs.date }}" "${{ inputs.changelog_labels }}")
        delimiter="$(openssl rand -hex 8)"
        {
          echo "changelog<<${delimiter}"
          echo "$changelog"
          echo "${delimiter}"
        } >> $GITHUB_OUTPUT

...
